// -----------------------------
//  $Revision: #1 $
//  $Change: 12648 $
// -----------------------------

//
// The main proc in here is: qube_addUI_menuCore
// 
// This proc creates the Maya->Qube menu, and the calls all the other qube_addUI* procs to populate
// the menu
//
// PipelineFX
//

//
// To auto-install, put the following in userSetup.mel:
//	 qube_addUI_menuCore();
//
// Location of userSetup.mel:
//	  * Windows: (Users Documents Directory)\maya\<Version>\scripts
//	  * Mac OS X: ~/Library/Preferences/Autodesk/maya/<version>/scripts.
//	  * Linux: ~/maya/<version>/scripts.
//

global proc qube_removeUI_maya()
{
	// Remove MenuItems
	if (`menuItem -q -exists qube_div1`)
		deleteUI -mi qube_div1; 
	if (`menuItem -q -exists qube_submitRender`)
		deleteUI -mi qube_submitRender; 
	if (`menuItem -q -exists qube_submitJobPerLayer`)
		deleteUI -mi qube_submitJobPerLayer; 
	if (`menuItem -q -exists qube_launchQubeGUI`)
		deleteUI -mi qube_launchQubeGUI;
	if (`menuItem -q -exists qube_launchQubeGUI_OB`)
		deleteUI -mi qube_launchQubeGUI_OB;
}

global proc qube_remove_legacy_UI_maya()
{
	global string $gMainRenderMenu;

	// Make sure Render menu has been created
	eval(`menu -q -pmc $gMainRenderMenu`);

	// Remove MenuItems
	setParent -menu $gMainRenderMenu;
	if (`menuItem -q -exists qube_div1`)
		deleteUI -mi qube_div1; 
	if (`menuItem -q -exists qube_submitRender`)
		deleteUI -mi qube_submitRender; 
	if (`menuItem -q -exists qube_launchQubeGUI`)
		deleteUI -mi qube_launchQubeGUI;
	if (`menuItem -q -exists qube_launchQubeGUI_OB`)
		deleteUI -mi qube_launchQubeGUI_OB;
}

//
// qube_optionVarDlg()
//
global proc qube_optionVarDlg()
{
	// Get optionVar
	string $qube_qubeguiPath = "";
	if (`optionVar -exists "qube_qubeguiPath"`) {
		$qube_qubeguiPath = `optionVar -q "qube_qubeguiPath"`;
	}

	string $commandName = "QubeGUI";
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");

	// Create OptionBox Dialog
	string $layout = getOptionBox();
	setParent $layout;
	setUITemplate -pushTemplate DefaultTemplate;
	tabLayout -tabsVisible 0 -scrollable 1;
	string $parent = `columnLayout -adjustableColumn 1`;
	string $macBrowseOptions = "";
	if (`about -macOS`) {
		// mac-specific flag to stop at the .app if specified
		$macBrowseOptions = " -app";
	}
	textFieldButtonGrp -label "QubeGUI Path" -fileName $qube_qubeguiPath
		-buttonLabel "Browse"
		-bc ("{string $result = `fileDialog -mode 0 " + $macBrowseOptions +
			 "`;  if ($result != \"\") textFieldButtonGrp -e -fi $result" +
			 " qube_addUI_optionVarDialog_textField; }")
		qube_addUI_optionVarDialog_textField;
	setUITemplate -popTemplate;
	// Buttons
	string $applyBtn = getOptionBoxApplyBtn();
	button -e
		-command ("optionVar -sv \"qube_qubeguiPath\"" +
				  "`textFieldButtonGrp -q -fi" +
				  " qube_addUI_optionVarDialog_textField`")
		$applyBtn;
	string $saveBtn = getOptionBoxSaveBtn();
	button -edit
		-command ("optionVar -sv \"qube_qubeguiPath\"" +
				  "`textFieldButtonGrp -q -fi" +
				  " qube_addUI_optionVarDialog_textField`; hideOptionBox")
		$saveBtn;
	string $resetBtn = getOptionBoxResetBtn();
	button -edit
		-command ("optionVar -sv \"qube_qubeguiPath\" \"\";" +
				  " textFieldButtonGrp -e -fi \"\"" +
				  " qube_addUI_optionVarDialog_textField;")
		$resetBtn;
	// Titling	  
	setOptionBoxTitle ("Qube Preferences");
	//setOptionBoxHelpTag( "Qube" );
	// Show
	showOptionBox();
}

//
// Add a top-level "Qube!" menu to the "Rendering" submenu
//
global proc string qube_add_qube_menu()
{
	// REVISIT: For some reason, the code below adds the "Qube!" menu
	// to all submenus, and not just the "Rendering" submenu. It used
	// to work properly in earlier versions of Maya...
	//
	// The following code to add Qube! menu only to the "Rendering"
	// submenu was contributed by anonymous@Animal Logic-- Mahalo!
	// <contrib>
	global string $gQubeMenu;
	if(`menu -q -exists $gQubeMenu` == 0) {
		print ("Creating top-level \"Qube!\" menu\n");
		global string $gMainWindow;
		global string $gRenderingMenus[];
		$gQubeMenu = `menu -label "Qube!" -aob true
			-to true -pmo true -parent $gMainWindow "newQubeMenu"`;
		$gRenderingMenus[size($gRenderingMenus)] = $gQubeMenu;
	}
	// </contrib>
	return $gQubeMenu;
}

//
// Get the QubeGUI path from the optionVar qube_qubeguiPath
//
global proc string qube_get_qubeguiPath()
{	
	// get the first 3 characters of the platform
	string $platform3 = python( "import sys; sys.platform[:3]" );

	// Get qubegui path from preferences
	string $qube_qubeguiPath = "";
	if (`optionVar -exists "qube_qubeguiPath"`) {
		$qube_qubeguiPath = `optionVar -q "qube_qubeguiPath"`;
	}

	switch ($platform3) {
	case "win": // Windows
		if($qube_qubeguiPath == "") {
			if(exists("C:/Program Files/pfx/qube/bin/qube.exe")) {
				$qube_qubeguiPath = "C:/Program Files/pfx/qube/bin/qube.exe";
			} else if(exists("C:/Program Files (x86)/pfx/qube/bin/qube.exe")) {
				$qube_qubeguiPath =
					"C:/Program Files (x86)/pfx/qube/bin/qube.exe";
			} else {
				$qube_qubeguiPath = "qube.exe";
			}
		}
		break;

	case "dar": // OSX
		if ($qube_qubeguiPath == "") {
			$qube_qubeguiPath = "/Applications/pfx/qube/qube.app";
		}
		break;

	case "lin": // Linux
		if ($qube_qubeguiPath == "") {
			$qube_qubeguiPath = "/usr/local/pfx/qube/bin/qube";
		}
		break;
	}
	// Verify path exists
	if (`filetest -x $qube_qubeguiPath` == 0) {
		error ("QubeGUI path not valid.  Set under Qube->Launch QubeGUI option box: "+$qube_qubeguiPath);
	}
	return $qube_qubeguiPath;
}

global proc string qube_getCurrentRendererShortname()
{
    string $curRenderer = `getAttr defaultRenderGlobals.currentRenderer`;
    switch ($curRenderer)
    {
    case "mayaSoftware":
        $curRenderer = "sw";
        break;
    case "mayaHardware":
        $curRenderer = "hw";
        break;
    case "mentalRay":
        $curRenderer = "mr";
        break;
    case "renderMan":
        $curRenderer = "rman";
        break;    
    }
    //print ("Current Renderer = "+$curRenderer);
    return $curRenderer;
}

//
global proc qube_addUI_menuCore()
{
	global string $gQubeMenu;
        global string $gQube_cmdTemplate;

	// Skip adding UI if in non-interactive mode
	if (`about -batch` == 1) {
		return;
	}
	
	// Set Parameters
	// NOTE: Running python directly does not seem to work (likely
	// because of PYTHONPATH is being set by maya)
	// If Linux, add this to the command so that it launches
	string $qube_launchgui; 
	string $qube_launchgui_prefix1 = "";
	string $qube_launchgui_prefix2 = "";
	string $qube_launchgui_suffix;	 // instead of using "open"
	// get the first 3 characters of the platform
	string $platform3 = python( "import sys; sys.platform[:3]" );

	switch ($platform3) {
	case "win": // Windows
		$qube_launchgui_prefix1 = "start \\\"";
		$qube_launchgui_prefix2 = "\\\"";
		$qube_launchgui_suffix = "";
		break;

	case "dar": // OSX
		$qube_launchgui_prefix1 = "";
		$qube_launchgui_prefix2 = "/Contents/MacOS/qube";
		$qube_launchgui_suffix = " >/dev/null 2>&1 &";
		// ...instead of using "open"
		break;

	case "lin": // Linux
		$qube_launchgui_prefix1 = "";
		$qube_launchgui_prefix2 = "";
		$qube_launchgui_suffix = " >/dev/null 2>&1 &";
		break;
	}
	// Construct a string, statically filling in some fields, and
	// dynamically filling in others
	$gQube_cmdTemplate = ("system(\"" + $qube_launchgui_prefix1 +
                                            "\"+`qube_get_qubeguiPath`+\"" +
                                              $qube_launchgui_prefix2 +
								" QUBEGUI_ARGS " +
								$qube_launchgui_suffix+"\")");
	// Remove legacy menuitems under the "Render" menu
	qube_remove_legacy_UI_maya();
	
	// create top-level "Qube!" menu
	qube_add_qube_menu();

	// Add menuitems
	print ("Adding Qube menuitems to Qube! menu\n");
	setParent -menu $gQubeMenu;

        qube_addUI_maya();
        qube_addUI_jobPerLayer();
        menuItem -divider true;

        qube_addUI_batchrender();
        menuItem -divider true;

        qube_addUI_appFinder();
        menuItem -divider true;

        qube_addUI_loadArchive();

	menuItem -label "Launch Qube WranglerView..."
		-c `substitute "QUBEGUI_ARGS" $gQube_cmdTemplate ""`
		-annotation "Launch the WranglerView to monitor and manage distributed jobs"
		-echoCommand true
		qube_launchQubeGUI;
	menuItem -optionBox true -c "qube_optionVarDlg()" qube_launchQubeGUI_OB;

}
